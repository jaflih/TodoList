(()=>{"use strict";var t={426:(t,n,e)=>{e.d(n,{Z:()=>r});var a=e(537),s=e.n(a),o=e(645),i=e.n(o)()(s());i.push([t.id,"@import url(https://fonts.googleapis.com/css2?family=Roboto&display=swap);"]),i.push([t.id,"body {\n  background-color: #f6f6f6;\n  font-family: 'Roboto', sans-serif;\n  box-sizing: border-box;\n  margin: 0;\n  color: #645f5f7a;\n  caret-color: magenta;\n}\n\nsection {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.todo {\n  box-shadow: 3px 2px 4px gray;\n}\n\n.todo > div,\n.task {\n  min-width: 400px;\n  max-width: 550px;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid #dcdbdb;\n}\n\n.todo .header {\n  background-color: white;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.todo .header h1 {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 400;\n  color: #645f5f;\n}\n\n.todo .tasks,\n.todo .add_task {\n  background-color: white;\n}\n\n.todo .add_task,\n.task {\n  padding: 20px;\n}\n\n.completed {\n  text-decoration: line-through;\n}\n\n.task {\n  display: flex;\n  justify-content: space-between;\n  transition: background-color 0.5s ease;\n}\n\n.todo .tasks {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 0;\n  margin: 0;\n}\n\ninput,\ninput:focus,\ntextarea:focus,\nselect:focus {\n  border: 0;\n  outline: 0;\n  font-size: 14px;\n  color: cadetblue;\n  line-height: 28px;\n  margin-right: 10px;\n  transition: background-color 0.5s ease;\n}\n\n.tasks input {\n  color: black;\n}\n\n.task:focus-within {\n  background-color: #ffff0052;\n}\n\n.dragStart,\n.dragStart input {\n  opacity: 0.9;\n  background-color: #fff;\n  border: 1px dotted black;\n  cursor: move;\n}\n\n.task:focus-within input {\n  background-color: #ffff0008;\n  transition: background-color 0s ease;\n}\n\ninput::placeholder {\n  font-style: italic;\n}\n\n.todo .footer {\n  text-align: center;\n  color: grey;\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n}\n\n.task:hover {\n  cursor: move;\n}\n\n.dragSurvol {\n  border: 2px dotted black;\n}\n\ni {\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAEA;EACE,yBAAyB;EACzB,iCAAiC;EACjC,sBAAsB;EACtB,SAAS;EACT,gBAAgB;EAChB,oBAAoB;AACtB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,aAAa;EACb,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,4BAA4B;AAC9B;;AAEA;;EAEE,gBAAgB;EAChB,gBAAgB;EAChB,aAAa;EACb,8BAA8B;EAC9B,gCAAgC;AAClC;;AAEA;EACE,uBAAuB;EACvB,aAAa;EACb,aAAa;EACb,8BAA8B;AAChC;;AAEA;EACE,SAAS;EACT,eAAe;EACf,gBAAgB;EAChB,cAAc;AAChB;;AAEA;;EAEE,uBAAuB;AACzB;;AAEA;;EAEE,aAAa;AACf;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,sCAAsC;AACxC;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,uBAAuB;EACvB,UAAU;EACV,SAAS;AACX;;AAEA;;;;EAIE,SAAS;EACT,UAAU;EACV,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,kBAAkB;EAClB,sCAAsC;AACxC;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,2BAA2B;AAC7B;;AAEA;;EAEE,YAAY;EACZ,sBAAsB;EACtB,wBAAwB;EACxB,YAAY;AACd;;AAEA;EACE,2BAA2B;EAC3B,oCAAoC;AACtC;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,WAAW;EACX,aAAa;EACb,uBAAuB;EACvB,aAAa;AACf;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB",sourcesContent:["@import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\n\nbody {\n  background-color: #f6f6f6;\n  font-family: 'Roboto', sans-serif;\n  box-sizing: border-box;\n  margin: 0;\n  color: #645f5f7a;\n  caret-color: magenta;\n}\n\nsection {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.todo {\n  box-shadow: 3px 2px 4px gray;\n}\n\n.todo > div,\n.task {\n  min-width: 400px;\n  max-width: 550px;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid #dcdbdb;\n}\n\n.todo .header {\n  background-color: white;\n  padding: 20px;\n  display: flex;\n  justify-content: space-between;\n}\n\n.todo .header h1 {\n  margin: 0;\n  font-size: 16px;\n  font-weight: 400;\n  color: #645f5f;\n}\n\n.todo .tasks,\n.todo .add_task {\n  background-color: white;\n}\n\n.todo .add_task,\n.task {\n  padding: 20px;\n}\n\n.completed {\n  text-decoration: line-through;\n}\n\n.task {\n  display: flex;\n  justify-content: space-between;\n  transition: background-color 0.5s ease;\n}\n\n.todo .tasks {\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  padding: 0;\n  margin: 0;\n}\n\ninput,\ninput:focus,\ntextarea:focus,\nselect:focus {\n  border: 0;\n  outline: 0;\n  font-size: 14px;\n  color: cadetblue;\n  line-height: 28px;\n  margin-right: 10px;\n  transition: background-color 0.5s ease;\n}\n\n.tasks input {\n  color: black;\n}\n\n.task:focus-within {\n  background-color: #ffff0052;\n}\n\n.dragStart,\n.dragStart input {\n  opacity: 0.9;\n  background-color: #fff;\n  border: 1px dotted black;\n  cursor: move;\n}\n\n.task:focus-within input {\n  background-color: #ffff0008;\n  transition: background-color 0s ease;\n}\n\ninput::placeholder {\n  font-style: italic;\n}\n\n.todo .footer {\n  text-align: center;\n  color: grey;\n  display: flex;\n  justify-content: center;\n  padding: 20px;\n}\n\n.task:hover {\n  cursor: move;\n}\n\n.dragSurvol {\n  border: 2px dotted black;\n}\n\ni {\n  cursor: pointer;\n}\n"],sourceRoot:""}]);const r=i},645:t=>{t.exports=function(t){var n=[];return n.toString=function(){return this.map((function(n){var e="",a=void 0!==n[5];return n[4]&&(e+="@supports (".concat(n[4],") {")),n[2]&&(e+="@media ".concat(n[2]," {")),a&&(e+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),e+=t(n),a&&(e+="}"),n[2]&&(e+="}"),n[4]&&(e+="}"),e})).join("")},n.i=function(t,e,a,s,o){"string"==typeof t&&(t=[[null,t,void 0]]);var i={};if(a)for(var r=0;r<this.length;r++){var d=this[r][0];null!=d&&(i[d]=!0)}for(var c=0;c<t.length;c++){var A=[].concat(t[c]);a&&i[A[0]]||(void 0!==o&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=o),e&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=e):A[2]=e),s&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=s):A[4]="".concat(s)),n.push(A))}},n}},537:t=>{t.exports=function(t){var n=t[1],e=t[3];if(!e)return n;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),o="/*# ".concat(s," */"),i=e.sources.map((function(t){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(t," */")}));return[n].concat(i).concat([o]).join("\n")}return[n].join("\n")}},379:t=>{var n=[];function e(t){for(var e=-1,a=0;a<n.length;a++)if(n[a].identifier===t){e=a;break}return e}function a(t,a){for(var o={},i=[],r=0;r<t.length;r++){var d=t[r],c=a.base?d[0]+a.base:d[0],A=o[c]||0,l="".concat(c," ").concat(A);o[c]=A+1;var p=e(l),u={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==p)n[p].references++,n[p].updater(u);else{var f=s(u,a);a.byIndex=r,n.splice(r,0,{identifier:l,updater:f,references:1})}i.push(l)}return i}function s(t,n){var e=n.domAPI(n);return e.update(t),function(n){if(n){if(n.css===t.css&&n.media===t.media&&n.sourceMap===t.sourceMap&&n.supports===t.supports&&n.layer===t.layer)return;e.update(t=n)}else e.remove()}}t.exports=function(t,s){var o=a(t=t||[],s=s||{});return function(t){t=t||[];for(var i=0;i<o.length;i++){var r=e(o[i]);n[r].references--}for(var d=a(t,s),c=0;c<o.length;c++){var A=e(o[c]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}o=d}}},569:t=>{var n={};t.exports=function(t,e){var a=function(t){if(void 0===n[t]){var e=document.querySelector(t);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(t){e=null}n[t]=e}return n[t]}(t);if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(e)}},216:t=>{t.exports=function(t){var n=document.createElement("style");return t.setAttributes(n,t.attributes),t.insert(n,t.options),n}},565:(t,n,e)=>{t.exports=function(t){var n=e.nc;n&&t.setAttribute("nonce",n)}},795:t=>{t.exports=function(t){var n=t.insertStyleElement(t);return{update:function(e){!function(t,n,e){var a="";e.supports&&(a+="@supports (".concat(e.supports,") {")),e.media&&(a+="@media ".concat(e.media," {"));var s=void 0!==e.layer;s&&(a+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),a+=e.css,s&&(a+="}"),e.media&&(a+="}"),e.supports&&(a+="}");var o=e.sourceMap;o&&"undefined"!=typeof btoa&&(a+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),n.styleTagTransform(a,t,n.options)}(n,t,e)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)}}}},589:t=>{t.exports=function(t,n){if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}}},n={};function e(a){var s=n[a];if(void 0!==s)return s.exports;var o=n[a]={id:a,exports:{}};return t[a](o,o.exports,e),o.exports}e.n=t=>{var n=t&&t.__esModule?()=>t.default:()=>t;return e.d(n,{a:n}),n},e.d=(t,n)=>{for(var a in n)e.o(n,a)&&!e.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:n[a]})},e.o=(t,n)=>Object.prototype.hasOwnProperty.call(t,n),(()=>{var t=e(379),n=e.n(t),a=e(795),s=e.n(a),o=e(569),i=e.n(o),r=e(565),d=e.n(r),c=e(216),A=e.n(c),l=e(589),p=e.n(l),u=e(426),f={};f.styleTagTransform=p(),f.setAttributes=d(),f.insert=i().bind(null,"head"),f.domAPI=s(),f.insertStyleElement=A(),n()(u.Z,f),u.Z&&u.Z.locals&&u.Z.locals;const h=(t,n)=>t.classList?t.classList.contains(n):!!t.className.match(new RegExp(`(\\s|^)${n}(\\s|$)`)),g=(t,n)=>{t.classList?t.classList.add(n):h(t,n)||(t.className+=` ${n}`)},E=(t,n)=>{if(t.classList)t.classList.remove(n);else if(h(t,n)){const e=new RegExp(`(\\s|^)${n}(\\s|$)`);t.className=t.className.replace(e," ")}},k=t=>document.querySelector(t);let v;class m{static dragStartEvent=t=>{g(t.target,"dragStart"),t.dataTransfer.setData("tex/html",t.target.id)};static dragEndEvent=t=>{E(t.target,"dragStart")};static dragEnterEvent=t=>{h(t.target,"input_task")||h(t.target,"task_input")||g(t.target,"dragSurvol")};static dragLeaveEvent=t=>{E(t.target,"dragSurvol")};static dragOverEvent=t=>{h(t.target,"task")&&(v=t.target),t.preventDefault()};static dropEvent=t=>{if(!t.currentTarget.contains(t.relatedTarget)&&"depot"!==t.target.id){const n=t.dataTransfer,e=k(`#${n.getData("tex/html")}`),a=document.querySelectorAll(".task");if(e.dataset.position-v.dataset.position==1){const t=e.dataset.position;v.before(e),e.dataset.position=v.dataset.position,v.dataset.position=t}else if(e.dataset.position-v.dataset.position==-1){v.after(e);const t=e.dataset.position;e.dataset.position=v.dataset.position,v.dataset.position=t}else if(e.dataset.position-v.dataset.position>1){const t=v.dataset.position,n=e.dataset.position;v.before(e),a.forEach((a=>{const{position:s}=a.dataset;if(t<=s&&s<=n)if(a.id===e.id)a.dataset.position=t;else{const t=Number.parseInt(s,10)+1;a.dataset.position=t}}))}else if(e.dataset.position-v.dataset.position<1){const t=v.dataset.position,n=e.dataset.position;v.after(e);for(let s=0;s<a.length;s+=1){const o=a[s],{position:i}=o.dataset;if(n<=i&&i<=t)if(o.id===e.id)o.dataset.position=t;else{const t=Number.parseInt(i,10)-1;o.dataset.position=t}}}E(v,"dragSurvol")}}}class x{constructor(t,n,e){this.index=t,this.description=n,this.completed=e}}class C{static save=t=>{localStorage.setItem("tasks",JSON.stringify(t))};static load=()=>null!=localStorage.getItem("tasks")?JSON.parse(localStorage.getItem("tasks")):[]}class b{constructor(){this.tasks=C.load()}getTasks=()=>this.tasks.sort(((t,n)=>t.index-n.index));getTask=t=>this.tasks[t-1];addTask=(t,n=!1)=>(this.tasks.push(new x(this.tasks.length+1,t,n)),C.save(this.tasks),this.getTask(this.tasks.length));deleteTask=t=>{const n=t-1;this.tasks.splice(n,1),this.tasks.filter((t=>t.index>n)).forEach((t=>{t.index-=1})),C.save(this.tasks)};updateTask=(t,n,e)=>{this.getTask(t).description=n,this.getTask(t).completed=e,C.save(this.tasks)};updateStatus=(t,n)=>{(class{static updateStatus=(t,n)=>{t.completed=n}}).updateStatus(this.getTask(t),n),C.save(this.tasks)};updateTasksPosition(t){const n=[];t.forEach((t=>{const e=this.getTask(t.dataset.id);e.index=Number.parseInt(t.dataset.position,10)+1,t.dataset.id=e.index,n.push(e)})),this.tasks=n,C.save(this.tasks)}clearCompleted=()=>{this.tasks=this.tasks.filter((t=>!1===t.completed)),this.tasks.forEach(((t,n)=>{t.index=n+1})),C.save(this.tasks)}}(new class{constructor(){this.manager=new b,this.addTaskInput=k("input"),this.setup()}setup=()=>{k(".footer").addEventListener("click",(()=>{this.manager.clearCompleted(),this.display()})),this.addTaskInput.addEventListener("keyup",(({key:t})=>{"Enter"===t&&this.createTask()})),k(".fa-plus").addEventListener("click",(()=>this.createTask()));const t=document.querySelector(".depot");t.addEventListener("dragenter",m.dragEnterEvent),t.addEventListener("dragleave",m.dragLeaveEvent),t.addEventListener("dragover",m.dragOverEvent),t.addEventListener("drop",(n=>{m.dropEvent(n),this.manager.updateTasksPosition(t.childNodes)}))};display=()=>{this.reset(k(".tasks")),this.manager.getTasks().forEach((t=>this.displayTask(k(".tasks"),t)))};displayTask=(t,n)=>{const e=this.createHtml(t,"li",[["id",`task_${n.index}`],["class","task"],["draggable","true"],["data-effectallowed","move"],["data-position",n.index-1],["data-id",n.index]]);e.addEventListener("dragstart",m.dragStartEvent),e.addEventListener("dragend",m.dragEndEvent);const a=this.createHtml(e,"div",[["class","task_input"]]);a.addEventListener("keyup",(t=>{this.updateTask(t,n.index)}));const s=this.createHtml(a,"input",[["id",`checkbox_task_${n.index}`],["type","checkbox"],["class",`task_${n.index}_checkbox checkbox_task`],["dataset.id",n.index]]);s.checked=n.completed,s.addEventListener("change",(()=>{this.updateStatus(n.index)}));const o=this.createHtml(a,"input",[["type","text"],["class",`task_${n.index} input_task`],["id",n.index],["id",`input_task_${n.index}`]]);o.value=n.description,o.addEventListener("keyup",(t=>{this.updateTask(t,n.index)})),o.addEventListener("focusout",(t=>{this.updateTask(t,n.index,!0)})),this.createHtml(e,"i",[["class","fas fa-trash"],["id",`task_${n.index}`],["dataset.id",n.index]]).addEventListener("click",(()=>{this.deleteTask(n.index)}))};createHtml=(t,n,e=null,a=null)=>{const s=document.createElement(n);return s.innerHTML=a,new Map(e).forEach(((t,n)=>{s.setAttribute(n,t)})),t.appendChild(s),s};reset=t=>{t.innerHTML=""};updateTask=(t,n,e=!1)=>{("Enter"===t.key||e)&&(this.manager.updateTask(n,k(`.task_${n}`).value,k(`.task_${n}_checkbox`).checked),k(".add_task input").focus())};updateStatus=t=>{this.manager.updateStatus(t,k(`.task_${t}_checkbox`).checked),k(`.task[data-id='${t}'] .input_task`).classList.toggle("completed")};deleteTask=t=>{this.manager.deleteTask(t),this.display()};createTask=()=>{const t=this.manager.addTask(this.addTaskInput.value);this.displayTask(k(".tasks"),t),this.addTaskInput.value="",k(`#input_task_${t.index}`).focus()}}).display()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,